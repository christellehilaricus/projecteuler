/* Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are
 * all figurate (polygonal) numbers and are generated by the following formulae:
 * 
 * Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
 * Square	 	P4,n=n^2 	        1, 4, 9, 16, 25, ...
 * Pentagonal	 	P5,n=n(3n-1)/2	 	1, 5, 12, 22, 35, ...
 * Hexagonal	 	P6,n=n(2n-1)	 	1, 6, 15, 28, 45, ...
 * Heptagonal	 	P7,n=n(5n-3)/2	 	1, 7, 18, 34, 55, ...
 * Octagonal	 	P8,n=n(3n-2)	 	1, 8, 21, 40, 65, ...
 * 
 * The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting
 * properties.
 * The set is cyclic, in that the last two digits of each number is the first two
 * digits of the next number (including the last number with the first).
 * Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal
 * (P5,44=2882), is represented by a different number in the set.
 * This is the only set of 4-digit numbers with this property.
 * Find the sum of the only ordered set of six cyclic 4-digit numbers for which each
 * polygonal type: triangle, square, pentagonal, hexagonal, heptagonal,
 * and octagonal, is represented by a different number in the set. */

function triangle(n){
  return n*(n+1)/2;
}

function square(n){
  return n*n;
}

function pentagonal(n){
  return n*(3*n-1)/2;
}

function hexagonal(n){
  return n*(2*n-1);
}

function heptagonal(n){
  return n*(5*n-3)/2;
}

function octagonal(n){
  return n*(3*n-2);
}

function prb61(){
  var octagonals = [],
      heptagonals = [],
      hexagonals = [],
      pentagonals = [],
      squares = [],
      triangles = [];

  var perms = [0,1,2,3,4,5,6].permutations(6),
      soluce = 0;

  var matchNumber = function(x,y){
    var temp = x.toString().substr(2,2);
    if(temp[0]!='0'){
      if(temp == y.toString().substr(0,2)){
        return true;
      }
    }
    return false;
  }

  for(var n = 19; n < 59; n++)
    octagonals.push(octagonal(n));

  for(var n = 21; n < 64; n++)
    heptagonals.push(heptagonal(n));
 
  for(var n = 23; n < 71; n++)
    hexagonals.push(hexagonal(n));
 
  for(var n = 26; n < 82; n++)
    pentagonals.push(pentagonal(n));
 
  for(var n = 32; n < 100; n++)
    squares.push(square(n));
 
  for(var n = 45; n < 141; n++)
    triangles.push(triangle(n));

  var main = function(string){
    var first,
        second,
        third,
        fourth,
        fifth,
        sixth;

    for(var i = 0; i < string.length; i++){
      switch(string[i]){
        case '0':
          if(i==0) first = octagonals;
          if(i==1) second = octagonals;
          if(i==2) third = octagonals;
          if(i==3) fourth = octagonals;
          if(i==4) fifth = octagonals;
          if(i==5) sixth = octagonals;
          break;
        case '1':
          if(i==0) first = heptagonals;
          if(i==1) second = heptagonals;
          if(i==2) third = heptagonals;
          if(i==3) fourth = heptagonals;
          if(i==4) fifth = heptagonals;
          if(i==5) sixth = heptagonals;
          break;
        case '2':
          if(i==0) first = hexagonals;
          if(i==1) second = hexagonals;
          if(i==2) third = hexagonals;
          if(i==3) fourth = hexagonals;
          if(i==4) fifth = hexagonals;
          if(i==5) sixth = hexagonals;
          break;
        case '3':
          if(i==0) first = pentagonals;
          if(i==1) second = pentagonals;
          if(i==2) third = pentagonals;
          if(i==3) fourth = pentagonals;
          if(i==4) fifth = pentagonals;
          if(i==5) sixth = pentagonals;
          break;
        case '4':
          if(i==0) first = squares;
          if(i==1) second = squares;
          if(i==2) third = squares;
          if(i==3) fourth = squares;
          if(i==4) fifth = squares;
          if(i==5) sixth = squares;
          break;
        case '5':
          if(i==0) first = triangles;
          if(i==1) second = triangles;
          if(i==2) third = triangles;
          if(i==3) fourth = triangles;
          if(i==4) fifth = triangles;
          if(i==5) sixth = triangles;
          break;
      }
    }

    for(var i = 0; i < first.length; i++){
      var attempt = [];
      attempt.push(first[i]);
      for(var j = 0; j < second.length; j++){
        if(matchNumber(first[i],second[j])){
          attempt.push(second[j]);
          for(var k = 0; k < third.length; k++){
            if(matchNumber(second[j],third[k])){
              attempt.push(third[k]);
              for(var l = 0; l < fourth.length; l++){
                if(matchNumber(third[k],fourth[l])){
                  attempt.push(fourth[l]);
                  for(var m = 0; m < fifth.length; m++){
                    if(matchNumber(fourth[l],fifth[m])){
                      attempt.push(fifth[m]);
                      for(var n = 0; n < sixth.length; n++){
                        if(matchNumber(fifth[m],sixth[n])){
                          attempt.push(sixth[n]);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if(attempt.length==6){
        if(matchNumber(attempt[5],attempt[0])){
          return attempt;
        }
      }
    }
    return [];
  }

  for(var i = 0; i < perms.length; i++){
    var temp = main(perms[i]);
    if(temp.length == 6){
      soluce = temp.sum();
      break;
    }
  }

  return soluce;
}
